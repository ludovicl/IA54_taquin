package ia54.project.taquin

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
//import ia54.project.taquin.PuzzleConstant
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.Random
import java.util.Collection
import io.sarl.lang.util.SynchronizedSet
import java.util.UUID
import io.sarl.lang.core.Space
import java.util.List
import java.util.ArrayList
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.EventSpaceSpecification
import ia54.project.taquin.SharedValues

agent Square { 
	uses Lifecycle, Schedules, DefaultContextInteractions, ExternalContextAccess, Behaviors
	var placementNumber : Integer
	var tileNumberOneMe : Integer
	var puzzleSize : Integer
	var tileSquareSpace : OpenEventSpace // openEvent => tile may be register or unregister from that space
	var squareSpace = new ArrayList<EventSpace>() // that eventspace will never change
	
	on Initialize { 
		puzzleSize = 4
		placementNumber = occurrence.parameters.get(0) as Integer
		tileNumberOneMe = occurrence.parameters.get(1) as Integer
		tileSquareSpace = occurrence.parameters.get(2) as OpenEventSpace
		squareSpace = new ArrayList<EventSpace>(occurrence.parameters.get(3) as ArrayList<EventSpace>)
				
		tileSquareSpace.register(asEventListener())

	}
	
	on AskMySquareNumber 
	{
    	var evt = new SendMySquareNumber(placementNumber)
		evt.source = tileSquareSpace.getAddress(getID())
		tileSquareSpace.emit(evt)
	}
		
//	on AskMySquareWhoAttack
//	{
//		var topTile : Integer;
//		var rightTile : Integer;
//		var bottomTile : Integer;
//		var leftTile : Integer;
//		
//		for (var y = 0 ; y < puzzleSize ; y++)
//		{ 
//			for (var x = 0 ; x < puzzleSize ; x++)
//			{
//				//we found the number in the matrix
//				if (tileNumberOneMe == SharedValues.getMatrix(x, y)) 
//				{
//					/*--get the adjacent numbers cheking the matrix--*/
//					
//					//top of current tile
//					if (y-1 >= 0 )
//					{
//					 	topTile = SharedValues.getMatrix(x, y-1)
//					}
//					
//					if (y+1 < puzzleSize)
//					{
//						bottomTile = SharedValues.getMatrix(x, y+1)
//					}
//					
//					if(x-1 >=0 )
//					{
//						leftTile = SharedValues.getMatrix(x, x-1)
//					}
//					
//					if(x+1 < puzzleSize )
//					{
//						rightTile = SharedValues.getMatrix(x, x+1)
//					}
//					
//							
//				}
//			}
//			println("")
//		}
//		
//	}	
		
}
