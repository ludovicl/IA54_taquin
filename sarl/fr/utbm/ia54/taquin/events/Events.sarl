package fr.utbm.ia54.taquin.events

import io.sarl.lang.core.Space
import io.sarl.util.OpenEventSpace
import io.sarl.lang.core.Address
import java.util.UUID 
import java.util.ArrayList

event SearchSatisfaction { 
 
}
 
event AskMySquareNumber {

}

event StartSearching {
	val squareNumber : Integer
	
	new (nb : Integer)
	{
		squareNumber = nb
	}
}

event AskSquareToSearchToAttack{
	val squareSearched : Integer
	val lastTileAttacked : ArrayList<Integer>
	val newSearch : boolean
		
	new (s : Integer, lta : ArrayList<Integer>, ns : boolean)
	{
		squareSearched = s
		lastTileAttacked = lta 
		newSearch = ns
	}
}

event SearchManhatanDistance 
{
	val blankTileCost : Integer
	val tileSearchedCost : Integer 
	val tileToMoveCost : Integer
	val isBlankTileFound : Boolean
	val isSearchedTileFound : Boolean
	val isTileToMoveFound : Boolean
	val tileToMove : Integer
	val tileSearched : Integer
	val path : ArrayList<Integer>
	
	new (btc : Integer, tsc : Integer, ttmc : Integer,
		ibtf : Boolean, istf : Boolean,  ittmf : Boolean, 
		ttm : Integer, ts : Integer, p : ArrayList<Integer>)
	{
		blankTileCost = btc 
		tileSearchedCost = tsc 
		tileToMoveCost = ttmc
		isBlankTileFound = ibtf
		isSearchedTileFound = istf
		isTileToMoveFound = ittmf
		tileToMove = ttm
		tileSearched = ts
		path = p				
	}
}

/*
 * 
 */
event SquareWithTileToMove{
	val tileNumber : Integer
	val squareSearched : Integer 
	
	new (tile : Integer, s : Integer)
	{
		tileNumber = tile
		squareSearched = s
	}
}


event SearchSquareWithBlankTile
{
	var squareSpace : OpenEventSpace
	var squareEmplacement : Integer
	val squareSearched : Integer
	val tileNumberEmitter : Integer
	var tileToAttack : Integer
	var tileBeforeTheLastTile : ArrayList<Integer>
	
	new (s : OpenEventSpace, empl : Integer, sq : Integer, tileNb : Integer, tileAtk : Integer, tbtlt: ArrayList<Integer>)
	{ 
		squareSpace = s
		squareEmplacement = empl  
		squareSearched = sq
        tileNumberEmitter = tileNb
        tileToAttack = tileAtk
        tileBeforeTheLastTile = tbtlt
	}
}


event AskYourTileToExchangeWithThatSpace 
{
	var newSpace : OpenEventSpace
	var squareEmplacement : Integer
	var squareSearched : Integer	
	var lastTileAttacked : ArrayList<Integer>	
	
	new (s : OpenEventSpace, emp : Integer, ss : Integer, lta : ArrayList<Integer> )
	{
		newSpace = s
		squareEmplacement = emp
		squareSearched = ss
		lastTileAttacked = lta		
	}	
}

event AskSquareToSearchBlankTile
{
	val squareSearched : Integer
	
	new (s : Integer)
	{
		squareSearched = s
	}
}

event CallBackLastSquaresThatEmit 
{
	var squareCalled : Integer 
	var squareSearched : Integer	
	var lastTileAttacked : ArrayList<Integer>	
	

	new (sc : Integer, sq : Integer,  lta : ArrayList<Integer>)
	{
		squareCalled = sc
		lastTileAttacked = lta
		squareSearched = sq
	}
}

event ExchangeWithThatSpace
{
	var newSpace : OpenEventSpace 

	new (s : OpenEventSpace)
	{
		newSpace = s
	}	
}

event SearchTileThatSearched
{
	val searched : Integer
	val lastTileAttacked : ArrayList<Integer>	
	
	new (s : Integer, lastTile : ArrayList<Integer> )
	{
		searched = s
		lastTileAttacked = lastTile
	}
}
event AskSquareStartSearching
{
	
}

event SendBackManhattanDistance
{
	val path : ArrayList<Integer>
	val tileToMove : Integer //the tile that emit
	val tileSearched : Integer
	val blankTileCost : Integer
	val tileSearchedCost : Integer 
	val tileToMoveCost : Integer
	
	new (p : ArrayList<Integer>,ttm : Integer,  tsc : Integer, 
		ttmc : Integer, btc : Integer, ts : Integer)
	{
		tileToMove = ttm
		path = p
		tileSearchedCost = tsc
		tileToMoveCost = ttmc
		blankTileCost = btc 
		tileSearched = ts
	}
}

event NewGame
{
	
}

event waitForNewGame
{
	
}
