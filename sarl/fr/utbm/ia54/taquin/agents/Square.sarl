package fr.utbm.ia54.taquin.agents

import fr.utbm.ia54.taquin.SharedValues
import fr.utbm.ia54.taquin.capacities.capMatrixManager
import fr.utbm.ia54.taquin.capacities.matrixManager
import fr.utbm.ia54.taquin.events.AskMySquareNumber
import fr.utbm.ia54.taquin.events.AskSquareToSearchToAttack
import fr.utbm.ia54.taquin.events.AskYourTileToExchangeWithThatSpace
import fr.utbm.ia54.taquin.events.CallBackLastSquaresThatEmit
import fr.utbm.ia54.taquin.events.ExchangeWithThatSpace
import fr.utbm.ia54.taquin.events.NewGame
import fr.utbm.ia54.taquin.events.SearchManhatanDistance
import fr.utbm.ia54.taquin.events.SearchSquareWithBlankTile
import fr.utbm.ia54.taquin.events.SearchTileThatSearched
import fr.utbm.ia54.taquin.events.AskSquareStartSearching
import fr.utbm.ia54.taquin.events.SendBackManhattanDistance 
import fr.utbm.ia54.taquin.events.StartSearching
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.util.OpenEventSpace
import io.sarl.util.Scopes
import java.util.ArrayList

agent Square { 
	
	uses Lifecycle, Schedules, DefaultContextInteractions, ExternalContextAccess, Behaviors, capMatrixManager
	var placementNumber : Integer 
	var tileNumberOnMe : Integer
	var puzzleSize : Integer
	var tileSquareSpace : OpenEventSpace // openEvent => tile may be register or unregister from that space
	var squareSpace = new ArrayList<OpenEventSpace>() 
	var mainSpace :  OpenEventSpace //this Square is centered in this space 
	var costTile1 = new ArrayList <Integer>()
	var costTile2 = new ArrayList <Integer>()
	var costTile3 = new ArrayList <Integer>()
	var costTile4 = new ArrayList <Integer>()
	
	def computeCost(x : Integer, y : Integer, squareSearched : Integer) : ArrayList<Integer>
	{  
		var tile : Integer
		var costToReachHisCase : Integer
		var costToReachSearchedSquare : Integer
		var costToReachBlankTile : Integer
						 
		if (y < puzzleSize)
		{
			tile = SharedValues.getMatrix(x, y) 
			
			var tileXY = new ArrayList<Integer>() 	 					
			tileXY =  getMatrixXYwithCaseNumber(tile, puzzleSize )	
			 
			var tileXYSearchedSquare = new ArrayList<Integer>()			
			tileXYSearchedSquare =  getMatrixXYwithCaseNumber(squareSearched, puzzleSize )	
			
			var xyBlankTile = new ArrayList<Integer>()
			xyBlankTile = getMatrixXYwithTileNumber(-1, puzzleSize)							
            
            costToReachSearchedSquare = Math.abs(tileXYSearchedSquare.get(0) - x) + Math.abs(tileXYSearchedSquare.get(1) - y )
            
            if(tile != -1)
            {
           		costToReachBlankTile = Math.abs(xyBlankTile.get(0) - x) + Math.abs(xyBlankTile.get(1) - y )
           		costToReachHisCase = Math.abs(tileXY.get(0) - x) + Math.abs(tileXY.get(1) - y)
            }
            else
            {
            	costToReachBlankTile = 0
            	costToReachHisCase = 0
            }            
		}
		
		var returnList = new ArrayList<Integer>()		
		returnList.add(costToReachHisCase)
		returnList.add(costToReachSearchedSquare)
		returnList.add(costToReachBlankTile)
		
		return returnList
	}
	
	on Initialize { 
		setSkill(capMatrixManager, new matrixManager)		
		puzzleSize = 4
		placementNumber = occurrence.parameters.get(0) as Integer
		tileNumberOnMe = occurrence.parameters.get(1) as Integer
		tileSquareSpace = occurrence.parameters.get(2) as OpenEventSpace 
		squareSpace = new ArrayList<OpenEventSpace>(occurrence.parameters.get(3) as ArrayList<OpenEventSpace>)
		mainSpace = occurrence.parameters.get(4) as OpenEventSpace
		
		println("Square number : " + placementNumber + " Space : " + tileSquareSpace )
		
		for ( spce : squareSpace)
		{
			spce.register(asEventListener())
		}
		
		mainSpace.register(asEventListener())
		
		tileSquareSpace.register(asEventListener())		
	
	}
	
	on AskMySquareNumber  
	{
    	var evt = new StartSearching(placementNumber)
		evt.source = tileSquareSpace.getAddress(getID())
		tileSquareSpace.emit(evt)
	}
	
	on AskSquareStartSearching
	{
		var path =new ArrayList<Integer>()
		path.add(placementNumber)
		var evt = new SearchManhatanDistance(1, 1, 1,false, false, false, null, tileNumberOnMe, path)
		evt.source = tileSquareSpace.getAddress(getID())
		mainSpace.emit(evt)
	}
	
	on SearchManhatanDistance [!occurrence.path.contains(placementNumber)]
	{
		var blankTileCost = occurrence.blankTileCost
		var tileToMove = occurrence.tileToMove
		var tileSearchedCost = occurrence.tileSearchedCost 
		var tileToMoveCost = occurrence.tileToMoveCost
		var isBlankTileFound = occurrence.isBlankTileFound
		var isSearchedTileFound = occurrence.isSearchedTileFound
		var isTileToMoveFound = occurrence.isTileToMoveFound
		var path = new ArrayList<Integer>(occurrence.path)
		var tileSearched = occurrence.tileSearched
		
		path.add(placementNumber)
		
		if (tileToMoveCost == 1)
		{
			tileToMove = tileNumberOnMe
		}
			
		if (tileToMove == placementNumber && !isTileToMoveFound)
		{
			println("tileToMove "+path)
			isTileToMoveFound = true
		}
		else
		{
			isTileToMoveFound = false
			tileToMoveCost = occurrence.tileToMoveCost + 1
		}
		
		if (tileSearched == placementNumber && !isSearchedTileFound)
		{
			println("tileSearched")
			isSearchedTileFound = true
		}
		else
		{
			isSearchedTileFound = false
			tileSearchedCost = occurrence.tileSearchedCost + 1		
		}
		
		if (tileNumberOnMe == -1 && !isBlankTileFound)
		{
			println("tileNumberOnMe")
			isBlankTileFound = true
		}
		else
		{
			isBlankTileFound = false
			blankTileCost = occurrence.blankTileCost + 1
		}
		
		if (isBlankTileFound &&
			isTileToMoveFound && 
			isSearchedTileFound)
		{
			var evtSend = new SendBackManhattanDistance(path,occurrence.tileSearched, placementNumber, 
													occurrence.blankTileCost, occurrence.tileSearchedCost, 
													occurrence.tileToMoveCost)
			evtSend.source = mainSpace.getAddress(getID())
			mainSpace.emit(evtSend)
			
		}
		else if (path.size() <= puzzleSize*puzzleSize)
		{
			var evt = new SearchManhatanDistance(blankTileCost, tileSearchedCost, tileToMoveCost, 
												isBlankTileFound, isSearchedTileFound,isTileToMoveFound, 
												tileToMove, tileSearched, path)
			evt.source = mainSpace.getAddress(getID())
			mainSpace.emit(evt)
		} 
	} 
	
	/* 
	 * Deprecated event
	 * Used to compute cost with global matrix 
	 */
	on AskSquareToSearchToAttack
	{
		println (occurrence.lastTileAttacked)
		println (tileNumberOnMe)
		
		var lastAttack : Integer
		
		var topTile : Integer;
		var rightTile : Integer;
		var bottomTile : Integer;
		var leftTile : Integer;

		//initiate with puzzleSize^2 number 
		//	=>useful if current tile have 3 or less neighbor 
		var topTileCostToReachHisCase : Integer = puzzleSize*puzzleSize
		var botTileCostToReachHisCase : Integer = puzzleSize*puzzleSize
		var leftTileCostToReachHisCase : Integer =puzzleSize*puzzleSize
		var rightTileCostToReachHisCase : Integer=puzzleSize*puzzleSize
		
		var topTileCostToReachSearchedSquare : Integer = puzzleSize*puzzleSize
		var botTileCostToReachSearchedSquare : Integer = puzzleSize*puzzleSize
		var leftTileCostToReachSearchedSquare : Integer = puzzleSize*puzzleSize
		var rightTileCostToReachSearchedSquare : Integer = puzzleSize*puzzleSize
		
		var topTileCostToReachBlankTile : Integer = puzzleSize*puzzleSize
		var botTileCostToReachBlankTile : Integer = puzzleSize*puzzleSize
		var leftTileCostToReachBlankTile : Integer = puzzleSize*puzzleSize
		var rightTileCostToReachBlankTile : Integer = puzzleSize*puzzleSize
		
		var xyBlankTile = new ArrayList<Integer>()
		xyBlankTile = getMatrixXYwithTileNumber(-1, puzzleSize)
		 
		var tileXYSearchedSquare = new ArrayList<Integer>()
		tileXYSearchedSquare = getMatrixXYwithCaseNumber(occurrence.squareSearched, puzzleSize)
		
		var topTileCost = new ArrayList<Integer>()
		var botTileCost = new ArrayList<Integer>()
		var leftTileCost = new ArrayList<Integer>()
		var rightTileCost = new ArrayList<Integer>()
		
		for (var y = 0 ; y < puzzleSize ; y++)
		{ 
			for (var x = 0 ; x < puzzleSize ; x++)
			{								
				//we found the number in the matrix
				if (tileNumberOnMe == SharedValues.getMatrix(x, y)) 
				{ 					
					/*--get the adjacent numbers cost cheking the matrix--*/					
					
					//get top tile  
					if (y-1 >= 0 ) 
					{
						topTileCost = computeCost(x, y-1, occurrence.squareSearched)

						topTileCostToReachHisCase = topTileCost.get(0)						
						topTileCostToReachSearchedSquare = topTileCost.get(1)
						topTileCostToReachBlankTile = topTileCost.get(2)
						
						topTile =  SharedValues.getMatrix(x, y-1)						 				
					}
					
					//get bottom tile
					if (y+1 < puzzleSize)
					{
						botTileCost = computeCost(x, y+1, occurrence.squareSearched)
						
						botTileCostToReachHisCase = botTileCost.get(0)						
						botTileCostToReachSearchedSquare = botTileCost.get(1)
						botTileCostToReachBlankTile = botTileCost.get(2)
						
						bottomTile =  SharedValues.getMatrix(x, y+1)
					}
					
					//get left tile
					if(x-1 >=0 ) 
					{
						leftTileCost = computeCost(x-1, y, occurrence.squareSearched)
						
						leftTileCostToReachHisCase = leftTileCost.get(0)						
						leftTileCostToReachSearchedSquare = leftTileCost.get(1)
						leftTileCostToReachBlankTile = leftTileCost.get(2)
						
						leftTile =  SharedValues.getMatrix(x-1, y)						
					}
					
					//get right tile 
					if(x+1 < puzzleSize )
					{
						rightTileCost = computeCost(x + 1, y, occurrence.squareSearched)

						rightTileCostToReachHisCase = rightTileCost.get(0)						
						rightTileCostToReachSearchedSquare = rightTileCost.get(1)
						rightTileCostToReachBlankTile = rightTileCost.get(2)
						
						rightTile =  SharedValues.getMatrix(x+1, y)												
					}												
				}
			}
		}
		
		var tileToAttack : Integer
		
		var topTileWeighting : Integer = 0
		var botTileWeighting : Integer = 0
		var leftTileWeighting : Integer = 0
		var rightTileWeighting : Integer = 0
		
		/*SearchedSquare is prioritary 
		 * Weighting => 3
		 */
		if (rightTileCostToReachSearchedSquare <= leftTileCostToReachSearchedSquare 
			&& rightTileCostToReachSearchedSquare <= topTileCostToReachSearchedSquare
			&& rightTileCostToReachSearchedSquare <= botTileCostToReachSearchedSquare)
		{
			rightTileWeighting = rightTileWeighting + 3
		}
		
		if (botTileCostToReachSearchedSquare <= leftTileCostToReachSearchedSquare
			&& botTileCostToReachSearchedSquare <= topTileCostToReachSearchedSquare
			&&  botTileCostToReachSearchedSquare <= rightTileCostToReachSearchedSquare)
		{
			botTileWeighting = botTileWeighting + 3
		}
		
		if (topTileCostToReachSearchedSquare <= leftTileCostToReachSearchedSquare
			&& topTileCostToReachSearchedSquare <= botTileCostToReachSearchedSquare
			&&  topTileCostToReachSearchedSquare <= rightTileCostToReachSearchedSquare)
		{
			topTileWeighting = topTileWeighting + 3			
		}
		
		if (leftTileCostToReachSearchedSquare <= topTileCostToReachSearchedSquare
			&& leftTileCostToReachSearchedSquare <= botTileCostToReachSearchedSquare
			&& leftTileCostToReachSearchedSquare <= rightTileCostToReachSearchedSquare)
		{
			leftTileWeighting = leftTileWeighting + 3
		}
		
		/*Search blank tile is 2d prioritary 
		 * Weighting => 2
		 */
		if (rightTileCostToReachBlankTile <= leftTileCostToReachBlankTile 
			&& rightTileCostToReachBlankTile <= topTileCostToReachBlankTile
			&& rightTileCostToReachBlankTile <= botTileCostToReachBlankTile)
		{
			rightTileWeighting = rightTileWeighting + 6
		}
		
		if (botTileCostToReachBlankTile <= leftTileCostToReachBlankTile
			&& botTileCostToReachBlankTile <= topTileCostToReachBlankTile
			&&  botTileCostToReachBlankTile <= rightTileCostToReachBlankTile)
		{
			botTileWeighting = botTileWeighting + 6
		}
		
		if (topTileCostToReachBlankTile <= leftTileCostToReachBlankTile
			&& topTileCostToReachBlankTile <= botTileCostToReachBlankTile
			&&  topTileCostToReachBlankTile <= rightTileCostToReachBlankTile)
		{
			topTileWeighting = topTileWeighting + 6
		}
		
		if (leftTileCostToReachBlankTile <= topTileCostToReachBlankTile
			&& leftTileCostToReachBlankTile <= botTileCostToReachBlankTile
			&& leftTileCostToReachBlankTile <= rightTileCostToReachBlankTile)
		{
			leftTileWeighting = leftTileWeighting + 6
		}
		
		
		/*Search blank tile is 3th prioritary 
		 * Weighting => 1
		 */
		if (rightTileCostToReachHisCase <= leftTileCostToReachHisCase 
			&& rightTileCostToReachHisCase <= topTileCostToReachHisCase
			&& rightTileCostToReachHisCase <= botTileCostToReachHisCase)
		{
			rightTileWeighting = rightTileWeighting + 1
		}
		
		if (botTileCostToReachHisCase <= leftTileCostToReachHisCase
			&& botTileCostToReachHisCase <= topTileCostToReachBlankTile
			&&  botTileCostToReachHisCase <= rightTileCostToReachHisCase)
		{
			botTileWeighting = botTileWeighting + 1
		}
		
		if (topTileCostToReachHisCase <= leftTileCostToReachHisCase
			&& topTileCostToReachHisCase <= botTileCostToReachHisCase
			&&  topTileCostToReachHisCase <= rightTileCostToReachHisCase)
		{
			topTileWeighting = topTileWeighting + 1			
		}
		
		if (leftTileCostToReachHisCase <= topTileCostToReachHisCase
			&& leftTileCostToReachHisCase <= botTileCostToReachHisCase
			&& leftTileCostToReachHisCase <= rightTileCostToReachHisCase)
		{
			leftTileWeighting = leftTileWeighting + 1
		}
		
		/*
		 * Check that we are not in an infinite loop
		 */
		if (occurrence.lastTileAttacked.contains(rightTile))
		{
			rightTileWeighting = 0
		}
		
		if (occurrence.lastTileAttacked.contains(leftTile))
		{
			leftTileWeighting = 0
		}
		
		if (occurrence.lastTileAttacked.contains(bottomTile))
		{
			botTileWeighting = 0
		}
		
		if (occurrence.lastTileAttacked.contains(topTile))
		{
			topTileWeighting = 0
		}
		
		
		if (topTile != null)
		{
			if (occurrence.newSearch && topTile == -1)
			{
				topTileWeighting = 0
			}	
		}
		
		if (leftTile != null)
		{
			if (occurrence.newSearch && leftTile == -1)
			{
				leftTileWeighting = 0
			}	
		}
		
		if (bottomTile != null)
		{
			if (occurrence.newSearch && bottomTile == -1)
			{
				botTileWeighting = 0
			}
		}	
		
		if (rightTile != null)
		{
			if (occurrence.newSearch && rightTile == -1)
			{
				rightTileWeighting = 0
			}
		}
		
		/*
		 * attack the tile with the most important weight
		 */
		if (rightTileWeighting >= leftTileWeighting 
			&& rightTileWeighting >= topTileWeighting
			&& rightTileWeighting >= botTileWeighting)
		{
			tileToAttack = rightTile
		}
		
		if (botTileWeighting >= leftTileWeighting
			&& botTileWeighting >= topTileWeighting
			&&  botTileWeighting >= rightTileWeighting)			
		{
			tileToAttack = bottomTile
		}
		
		if (topTileWeighting >= leftTileWeighting
			&& topTileWeighting >= botTileWeighting
			&&  topTileWeighting >= rightTileWeighting)						
		{
			tileToAttack = topTile	
		}
		
		if (leftTileWeighting >= topTileWeighting
			&& leftTileWeighting >= botTileWeighting
			&& leftTileWeighting >= rightTileWeighting)
		{
			tileToAttack = leftTile
		}
		
		lastAttack = tileToAttack
		
		println("From : "+ tileNumberOnMe+" Attack : " +tileToAttack) //debug
		var lastTilesAttacked = new ArrayList<Integer>(occurrence.lastTileAttacked)

		if (!lastTilesAttacked.contains(tileNumberOnMe))
		{ 
			lastTilesAttacked.add(tileNumberOnMe)			
		}		
		
		var evt2 = new SearchSquareWithBlankTile(tileSquareSpace, placementNumber, occurrence.squareSearched, tileNumberOnMe, tileToAttack, lastTilesAttacked) 
		 
		evt2.source = mainSpace.getAddress(getID())
		mainSpace.emit(evt2)
	}
	
	on CallBackLastSquaresThatEmit[occurrence.squareCalled == tileNumberOnMe]
	{
		// we call last tile and ask here to move 
		var evtMoveBack = new SearchSquareWithBlankTile(mainSpace, placementNumber, occurrence.squareSearched, tileNumberOnMe, -1, occurrence.lastTileAttacked)
		evtMoveBack.source = mainSpace.getAddress(getID())
		mainSpace.emit(evtMoveBack)
	}
	
	on SearchSquareWithBlankTile[occurrence.tileToAttack == tileNumberOnMe]
	{
//		println ("dans square " + tileNumberOnMe )
		if (occurrence.tileToAttack == -1 && occurrence.tileBeforeTheLastTile.size >= 1)
		{
			/* Send an event to the tile to ask here to unregister 
			 * the current space and register with the ended square
			 */
			var evt = new ExchangeWithThatSpace(occurrence.squareSpace)
			evt.source = tileSquareSpace.getAddress(getID())
			tileSquareSpace.emit(evt)
			
			/*
			 * TileNumberOnMe is now the last tile attacked
			 */
			 var tileBeforeAttack = occurrence.tileBeforeTheLastTile
			 tileNumberOnMe = tileBeforeAttack.get(tileBeforeAttack.size() - 1)
//			
			var blankSquareXY = getMatrixXYwithTileNumber(-1, puzzleSize) 
			var blankSquare = getMatrixCaseNumberWithXY(blankSquareXY.get(0), blankSquareXY.get(1), puzzleSize)	
			
			moveTiletoAnotherEmplacement(occurrence.squareEmplacement, -1 ,puzzleSize)
			moveTiletoAnotherEmplacement(blankSquare, occurrence.tileNumberEmitter ,puzzleSize)
			printMatrix(puzzleSize)

			var evtMoveBlank = new AskYourTileToExchangeWithThatSpace(tileSquareSpace, placementNumber, occurrence.squareSearched, occurrence.tileBeforeTheLastTile) 
			evtMoveBlank.source = mainSpace.getAddress(getID())
			mainSpace.emit(evtMoveBlank, Scopes.addresses(occurrence.source))//scopes => emit to the emiter
		}
		else
		{
			printMatrix(puzzleSize)
			println("Attack : " + occurrence.tileToAttack)
			var ad = occurrence.source
			var path = new ArrayList<Integer>()
    		var evt = new SearchManhatanDistance(0, 0, 0,false, false, false, null, null, path) 
			evt.source = mainSpace.getAddress(getID())
			mainSpace.emit(evt, Scopes.addresses(mainSpace.getAddress(getID())))
		}
	}
	
	on SendBackManhattanDistance[occurrence.path.contains(placementNumber)]
	{
		var path = new ArrayList<Integer>(occurrence.path)
		
		if (placementNumber == path.get(0))
		{
			path.remove(placementNumber)
			
			var nbNeighbors = 0
			 
			if (!costTile1.isEmpty)
			{
				nbNeighbors = nbNeighbors+1
			}
			if (!costTile2.isEmpty)
			{
				nbNeighbors = nbNeighbors+1
			}
			if (!costTile3.isEmpty)
			{
				nbNeighbors = nbNeighbors+1
			}
			if (!costTile4.isEmpty)
			{
				nbNeighbors = nbNeighbors+1
			}
			
			if (nbNeighbors >= mainSpace.participants.size - 1) // we receive all the event back
			{
				var lta = new ArrayList<Integer>()
				
				if (costTile1.get(2) <= costTile2.get(2)
					&& costTile1.get(2) <= costTile3.get(2)
					&& costTile1.get(2) <= costTile4.get(2))
				{
					lta.add(costTile1.get(1))
					var evtSearch = new SearchSquareWithBlankTile(tileSquareSpace, placementNumber, occurrence.tileSearched, tileNumberOnMe, costTile1.get(1),lta) 
					mainSpace.emit(evtSearch) 
				}
				else if (costTile2.get(2) <= costTile1.get(2)
						&& costTile2.get(2) <= costTile3.get(2)
						&& costTile2.get(2) <= costTile4.get(2))
				{
					lta.add(costTile2.get(1)) 
					var evtSearch = new SearchSquareWithBlankTile(tileSquareSpace, placementNumber, occurrence.tileSearched, tileNumberOnMe, costTile2.get(1),lta) 
					mainSpace.emit(evtSearch) 
					
				}
				else if (costTile3.get(2) <= costTile1.get(2)
						&& costTile3.get(2) <= costTile2.get(2)
						&& costTile3.get(2) <= costTile4.get(2))
				{
					lta.add(costTile3.get(1))
					var evtSearch = new SearchSquareWithBlankTile(tileSquareSpace, placementNumber, occurrence.tileSearched, tileNumberOnMe, costTile3.get(1),lta) 
					mainSpace.emit(evtSearch) 
				} 
				else if (costTile4.get(2) <= costTile1.get(2)
						&& costTile4.get(2) <= costTile2.get(2)
						&& costTile4.get(2) <= costTile3.get(2))
				{
					lta.add(costTile4.get(1))
					var evtSearch = new SearchSquareWithBlankTile(tileSquareSpace, placementNumber, occurrence.tileSearched, tileNumberOnMe, costTile4.get(1),lta) 
					mainSpace.emit(evtSearch) 
				}
			}
			else
			{//TODO : apply a coefficient to each cost
				if (costTile1.isEmpty && costTile2.isEmpty
					&& costTile3.isEmpty && costTile4.isEmpty)
				{
					costTile1.add(placementNumber)
					costTile1.add(occurrence.tileSearchedCost 
								+ occurrence.tileToMoveCost
								+ occurrence.blankTileCost)
				}
				
				else if(costTile2.isEmpty && !costTile1.isEmpty
					&& costTile3.isEmpty && costTile4.isEmpty)
				{
					costTile2.add(placementNumber)
					costTile2.add(occurrence.tileSearchedCost 
								+ occurrence.tileToMoveCost
								+ occurrence.blankTileCost)
				}
				else if(costTile3.isEmpty && costTile2.isEmpty
					&& costTile1.isEmpty && !costTile4.isEmpty)
				{
					costTile3.add(placementNumber)
					costTile3.add(occurrence.tileSearchedCost 
								+ occurrence.tileToMoveCost
								+ occurrence.blankTileCost)
				}
				else if(costTile4.isEmpty && !costTile1.isEmpty
					&& !costTile3.isEmpty && !costTile2.isEmpty)
				{
					costTile4.add(placementNumber)
					costTile4.add(occurrence.tileSearchedCost 
								+ occurrence.tileToMoveCost
								+ occurrence.blankTileCost)
				}
			}
		}
		else
		{
			path.remove(placementNumber)
			var evt = new SendBackManhattanDistance(path, occurrence.tileSearched, placementNumber, occurrence.blankTileCost,
									occurrence.tileSearchedCost, occurrence.tileToMoveCost)
			evt.source = mainSpace.getAddress(getID())
			mainSpace.emit(evt)
		}
	}

	on AskYourTileToExchangeWithThatSpace
	{ 
		var evt = new ExchangeWithThatSpace(occurrence.newSpace)
		evt.source = tileSquareSpace.getAddress(getID())
		tileSquareSpace.emit(evt)
		
		tileNumberOnMe = -1
		
		var lastSquareAttacked = new ArrayList<Integer>(occurrence.lastTileAttacked)
		
		if (lastSquareAttacked.size() > 2)
		{
			var squareToCall = lastSquareAttacked.get(lastSquareAttacked.size() - 2)
			lastSquareAttacked.remove(lastSquareAttacked.size() - 1)
//			lastSquareAttacked.remove(lastSquareAttacked.size() - 1) 
			
			var evtCallBack = new CallBackLastSquaresThatEmit(squareToCall, occurrence.squareSearched, lastSquareAttacked)
			mainSpace.emit(evtCallBack)
		}
		else
		{			 
			//TODO : aller chercher une liste globale
			
			var evtSquare = new SearchTileThatSearched(4, occurrence.lastTileAttacked)
			mainSpace.emit(evtSquare) 		
		}
	}
	 
	 on SearchTileThatSearched[occurrence.searched == tileNumberOnMe]
	 { 
			 
		//TODO : aller chercher une liste globalele
			
		var path = new ArrayList<Integer>()
    	var evtSquare = new SearchManhatanDistance(0, 0, 0,false, false, false, null, null, path) 
		
		evtSquare.source = mainSpace.getAddress(getID())
		mainSpace.emit(evtSquare, Scopes.addresses(mainSpace.getAddress(getID()))) 
		
	 }  

	on NewGame 
	{
		killMe
	}
}

