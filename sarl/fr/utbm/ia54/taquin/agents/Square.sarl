package fr.utbm.ia54.taquin.agents

import fr.utbm.ia54.taquin.SharedValues
import fr.utbm.ia54.taquin.capacities.capMatrixManager
import fr.utbm.ia54.taquin.capacities.matrixManager
import fr.utbm.ia54.taquin.events.AskMySquareNumber
import fr.utbm.ia54.taquin.events.AskSquareToSearchBlankTile
import fr.utbm.ia54.taquin.events.AskSquareToSearchToAttack
import fr.utbm.ia54.taquin.events.AskYourTileToExchangeWithThatSpace
import fr.utbm.ia54.taquin.events.ExchangeWithThatSpace
import fr.utbm.ia54.taquin.events.IsBlankTileANeighbor
import fr.utbm.ia54.taquin.events.NewGame
import fr.utbm.ia54.taquin.events.SearchSquareWithBlankTile
import fr.utbm.ia54.taquin.events.SendMySquareNumber
import fr.utbm.ia54.taquin.events.SquareWithTileToMove
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.util.OpenEventSpace
import io.sarl.util.Scopes
import java.util.ArrayList

agent Square { 
	uses Lifecycle, Schedules, DefaultContextInteractions, ExternalContextAccess, Behaviors, capMatrixManager
	var placementNumber : Integer
	var tileNumberOneMe : Integer
	var puzzleSize : Integer
	var tileSquareSpace : OpenEventSpace // openEvent => tile may be register or unregister from that space
	var squareSpace = new ArrayList<OpenEventSpace>() // that eventspace will never change
	var mainSpace :  OpenEventSpace //this Square is centered in this space 
	
	on Initialize { 
		setSkill(capMatrixManager, new matrixManager)		
		puzzleSize = 4
		placementNumber = occurrence.parameters.get(0) as Integer
		tileNumberOneMe = occurrence.parameters.get(1) as Integer
		tileSquareSpace = occurrence.parameters.get(2) as OpenEventSpace 
		squareSpace = new ArrayList<OpenEventSpace>(occurrence.parameters.get(3) as ArrayList<OpenEventSpace>)
		mainSpace = occurrence.parameters.get(4) as OpenEventSpace
		
		for ( spce : squareSpace)
		{
			spce.register(asEventListener())			
		}
		
		mainSpace.register(asEventListener())
		
		tileSquareSpace.register(asEventListener())

	}
	
	on AskMySquareNumber  
	{
    	var evt = new SendMySquareNumber(placementNumber)
		evt.source = tileSquareSpace.getAddress(getID())
		tileSquareSpace.emit(evt)
	}
	
	on IsBlankTileANeighbor 
	{
		var evt = new SearchSquareWithBlankTile(mainSpace, placementNumber)// placementNumber is used to update the matrix
		evt.source = mainSpace.getAddress(getID())
		mainSpace.emit(evt) 
	}
		
	on AskSquareToSearchToAttack
	{
		
		var topTile : Integer;
		var rightTile : Integer;
		var bottomTile : Integer;
		var leftTile : Integer;
		
		//initiate with puzzleSize^2 number 
		//	=>useful if current tile have 3 or less neighbor 
		var topTileCost : Integer = puzzleSize*puzzleSize
		var botTileCost : Integer = puzzleSize*puzzleSize
		var leftTileCost : Integer =puzzleSize*puzzleSize
		var rightTileCost : Integer=puzzleSize*puzzleSize
		
		//tdodo : blank tile
//		var evt = new SquareWithTileToMove(tileToAttack) 
//		evt.source = tileSquareSpace.getAddress(getID())
//		tileSquareSpace.emit(evt) 
						
		
		for (var y = 0 ; y < puzzleSize ; y++)
		{ 
			for (var x = 0 ; x < puzzleSize ; x++)
			{
				if (SharedValues.getMatrix(x, y) == -1)
				{
					
				}
				//we found the number in the matrix
				if (tileNumberOneMe == SharedValues.getMatrix(x, y)) 
				{ 
//					var xyFinalTilePlacement = new ArrayList<Integer>()			
//					xyFinalTilePlacement = getMatrixXYwithCaseNumber(placementNumber, puzzleSize)
					
					/*--get the adjacent numbers cost cheking the matrix--*/					
					
					//get top tile 
					if (y-1 >= 0 ) 
					{
					 	topTile = SharedValues.getMatrix(x, y-1)
					 	var tileXY = new ArrayList<Integer>() 
					 	tileXY =  getMatrixXYwithCaseNumber(topTile, puzzleSize )
					 											 						
						topTileCost = Math.abs(tileXY.get(0) - x) + Math.abs(tileXY.get(1)  - (y - 1)) 					 	

					}
					
					//get bottom tile
					if (y+1 < puzzleSize)
					{
						bottomTile = SharedValues.getMatrix(x, y+1)
						var tileXY = new ArrayList<Integer>() 						
						tileXY =  getMatrixXYwithCaseNumber(bottomTile, puzzleSize )						
						botTileCost = Math.abs(tileXY.get(0) - x) + Math.abs(tileXY.get(1) - (y + 1)) 
					}
					
					//get left tile
					if(x-1 >=0 )
					{
						leftTile = SharedValues.getMatrix(x-1, y)
						var tileXY = new ArrayList<Integer>() 						
						tileXY =  getMatrixXYwithCaseNumber(leftTile, puzzleSize )											 												
						leftTileCost = Math.abs(tileXY.get(0) - (x - 1)) + Math.abs(tileXY.get(1) - y) 
					}
					
					//get right tile 
					if(x+1 < puzzleSize )
					{
						rightTile = SharedValues.getMatrix(x + 1, y)
						var tileXY = new ArrayList<Integer>()					
						tileXY =  getMatrixXYwithCaseNumber(rightTile, puzzleSize )											 																		
						rightTileCost = Math.abs(tileXY.get(0) - (x + 1)) + Math.abs(tileXY.get(1) - y)
					}												
				}
			}
		}		
		
		var tileToAttack : Integer
		
//		if (rightTile == -1 || leftTile == -1 || topTile == -1 || bottomTile == -1)
//		{
			//get UUID and Space of -1 tile
//			var evt2 = new getMyTileUUIDandSpace()  
//			evt2.source = tileSquareSpace.getAddress(getID()) 
//			tileSquareSpace.emit(evt2)
			
//			var evt = new ChangeWithBlank() 
//			evt.source = tileSquareSpace.getAddress(getID()) 
//			tileSquareSpace.emit(evt)
//		}
		
		
		if (rightTileCost <= leftTileCost && rightTileCost <= topTileCost
			&& rightTileCost <= botTileCost)
		{
			tileToAttack = rightTile
		}
		
		else if (botTileCost <= leftTileCost && botTileCost <= topTileCost
			&&  botTileCost <= rightTileCost)
		{
			tileToAttack = bottomTile	
		}
		
		else if (topTileCost <= leftTileCost && topTileCost <= botTileCost
			&&  topTileCost <= rightTileCost)
		{
			tileToAttack = topTile	
		}
		
		else if (leftTileCost <= topTileCost && topTileCost <= botTileCost
			&&  leftTileCost <= rightTileCost)
		{
			tileToAttack = leftTile	
		}
		printMatrix(puzzleSize)
		
		//Brodcast an event with the tile to move in parameters
		var evt2 = new SquareWithTileToMove(tileToAttack) 
		evt2.source = mainSpace.getAddress(getID())
		mainSpace.emit(evt2)
	}
	
	on SearchSquareWithBlankTile
	{
		if (tileNumberOneMe == -1) 
		{ 
			var evt = new ExchangeWithThatSpace(tileSquareSpace)
			evt.source = mainSpace.getAddress(getID())
			mainSpace.emit(evt)
			moveTiletoAnotherEmplacement(occurrence.squareEmplacement, -1 ,puzzleSize)	
						 
			var evtMoveBlank = new AskYourTileToExchangeWithThatSpace(tileSquareSpace, placementNumber) 
			evtMoveBlank.source = mainSpace.getAddress(getID())
			mainSpace.emit(evtMoveBlank, Scopes.addresses(occurrence.source))//scopes => emit to the emiter
		}
		else
		{
			var evtMoveBlank = new AskSquareToSearchToAttack() 
			evtMoveBlank.source = mainSpace.getAddress(getID())
			mainSpace.emit(evtMoveBlank, Scopes.addresses(occurrence.source))//scopes => emit to the emiter	
		}
	}
	
	on AskSquareToSearchBlankTile 
	{
		var evt = new SearchSquareWithBlankTile(mainSpace, placementNumber)// placementNumber is used to update the matrix
		evt.source = mainSpace.getAddress(getID())
		mainSpace.emit(evt) 
	}

	on AskYourTileToExchangeWithThatSpace
	{ 
		var evt = new ExchangeWithThatSpace(occurrence.newSpace)
		 
		moveTiletoAnotherEmplacement(occurrence.squareEmplacement, tileNumberOneMe, puzzleSize)
		
		evt.source = mainSpace.getAddress(getID())
		mainSpace.emit(evt)
	}
	
	on SquareWithTileToMove
	{
		print (occurrence.tileNumber)
		if (occurrence.tileNumber == tileNumberOneMe)
		{
			var evt = new AskSquareToSearchToAttack()
			evt.source = tileSquareSpace.getAddress(getID()) 
			tileSquareSpace.emit(evt) 
		}
	}
	
	on NewGame 
	{
		killMe
	}
}

