package fr.utbm.ia54.taquin.agents

import fr.utbm.ia54.taquin.events.AskMySquareNumber
import fr.utbm.ia54.taquin.events.AskSquareToSearchBlankTile
import fr.utbm.ia54.taquin.events.ExchangeWithThatSpace
import fr.utbm.ia54.taquin.events.NewGame
import fr.utbm.ia54.taquin.events.SearchSatisfaction
import fr.utbm.ia54.taquin.events.SendMySquareNumber
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.util.OpenEventSpace

agent ActiveTile {
    uses Lifecycle, Schedules, DefaultContextInteractions, ExternalContextAccess, Behaviors
    var myNumber : Integer
    var tileSquareSpace : OpenEventSpace
    var isSatisfed : Boolean
     
    on Initialize {
        myNumber = occurrence.parameters.get(0) as Integer
        tileSquareSpace = occurrence.parameters.get(1) as OpenEventSpace
        tileSquareSpace.register(asEventListener())
        isSatisfed = false

        println("Active tile spawned with number: " + myNumber)
    }
    
    on SearchSatisfaction{
    	var evt = new AskMySquareNumber() //define the event
		evt.source = tileSquareSpace.getAddress(getID()) //define source 
		tileSquareSpace.emit(evt) //emit the event in the space
    }
    
    on SendMySquareNumber{
    	println("I am tile number " + myNumber + " and my square is " + occurrence.squareNumber)
    	if (occurrence.squareNumber!=myNumber)
    	{
    		var evt = new AskSquareToSearchBlankTile() //define the event 
			evt.source = tileSquareSpace.getAddress(getID()) //define source 
			tileSquareSpace.emit(evt) //emit the event in the space
    	}
    	else
    	{
    		isSatisfed=true
    	}    	  
    } 
    
    on ExchangeWithThatSpace
    {
    	tileSquareSpace.unregister(asEventListener())
    	occurrence.newSpace.register(asEventListener())
    } 
    
//    on getMyTileUUIDandSpace
//    {
//    	if (occurrence.)
//    	var evt = new returnTileUUIDandSpace(tileSquareSpace, ) //define the event 
//		evt.source = tileSquareSpace.getAddress(getID()) //define source 
//		tileSquareSpace.emit(evt) //emit the event in the space
//    	 	
//    }

	on NewGame
	{
		println("Tile " + myNumber + " is dying!")
		killMe
	}
}

agent BlankTile {
    uses Lifecycle, Schedules, DefaultContextInteractions, ExternalContextAccess, Behaviors
    var space : OpenEventSpace

    on Initialize {
        space = occurrence.parameters.get(0) as OpenEventSpace
        space.register(asEventListener())

        println("Blank tile spawned")
    }
    
    on NewGame
    {
    	println("Blank tile is dying!!!")
    	killMe
    }
    
}