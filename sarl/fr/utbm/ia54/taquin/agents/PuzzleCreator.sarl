package fr.utbm.ia54.taquin.agents

import fr.utbm.ia54.taquin.PuzzleLauncher
import fr.utbm.ia54.taquin.SharedValues
import fr.utbm.ia54.taquin.capacities.capMatrixManager
import fr.utbm.ia54.taquin.capacities.matrixManager
import fr.utbm.ia54.taquin.events.NewGame
import fr.utbm.ia54.taquin.events.SearchSatisfaction
import fr.utbm.ia54.taquin.events.waitForNewGame
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.ArrayList
import java.util.Random
import java.util.UUID

agent PuzzleCreator {
	uses Lifecycle, Schedules, DefaultContextInteractions, ExternalContextAccess, Behaviors, capMatrixManager	
	var puzzleSize = SharedValues.getSize()
 	var tileNumber : Integer
	
	on Initialize {
		val random = new Random()
		var randNumber : Integer
		var allTileNumbers = new ArrayList<Integer>()
		var spaceSquareCenter = new ArrayList<OpenEventSpace>()
		var rightColumn = new ArrayList<Integer>()
		var leftColumn = new ArrayList<Integer>()
		var startingSpace : OpenEventSpace 
  
		setSkill(capMatrixManager, new matrixManager)
		  		  
		//create an arraylist with all tiles
		for (var i = 0; i <= puzzleSize*puzzleSize - 2; i++)
		{
			allTileNumbers.add(i)
		}
		
		for(var i = 0; i <= (puzzleSize*puzzleSize) -1; i++) // -1 cause we start at 0 
		{
			var uid = UUID::randomUUID   
			var space = defaultContext.createSpace(typeof(OpenEventSpaceSpecification),uid)
			spaceSquareCenter.add(space)
		}
	
		//4 size puzzle => left column : 4, 8
		for(var j : Integer = 1; j <= puzzleSize - 2; j++)
		{ 
			leftColumn.add(j * puzzleSize )
		}
	
		//4 size puzzle => right column : 7, 11
		for(var j : Integer = 2; j <= puzzleSize - 1; j++)
		{
			rightColumn.add(j * puzzleSize - 1) 
		}
	
		for(var i = 0; i <= (puzzleSize * puzzleSize) - 1; i++) 
		{
			var mainSquareSpace : OpenEventSpace // the space with the agent centred and his neighbor 
			
			tileNumber = -1
			if (!allTileNumbers.isEmpty())
			{
				randNumber = random.nextInt(allTileNumbers.size())
				tileNumber = allTileNumbers.get(randNumber) 
				allTileNumbers.remove(tileNumber)
			}
			
			var spaceToAddToSquareAgent = new ArrayList<OpenEventSpace>()
			var tuileSquareSpace : OpenEventSpace  
			tuileSquareSpace = defaultContext.createSpace(typeof(OpenEventSpaceSpecification), UUID::randomUUID )
							
			//in these if we create multiple space with square that are neighbor
			if(i == 0) //top left corner  
			{
				mainSquareSpace = spaceSquareCenter.get(i)				
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
			}
			else if(i == puzzleSize -1) //top right corner
			{
				mainSquareSpace = spaceSquareCenter.get(i)
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
			}
			else if(i == (puzzleSize * puzzleSize) - puzzleSize) //bottom left corner 
			{
				mainSquareSpace = spaceSquareCenter.get(i)
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
			}
			else if(i == (puzzleSize * puzzleSize - 1)) // bottom right corner 
			{
				mainSquareSpace = spaceSquareCenter.get(i)
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
			}
			else if(leftColumn.contains(i)) // left column
			{  				
				mainSquareSpace = spaceSquareCenter.get(i)
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
			}
			else if(rightColumn.contains(i)) //right column 
			{
				mainSquareSpace = spaceSquareCenter.get(i)
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
			}
			else if(i > 0 && i < puzzleSize -1 ) // top line
			{
				mainSquareSpace = spaceSquareCenter.get(i)				
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1)) 
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
			}
			else if(i < puzzleSize * puzzleSize -1 && i > (puzzleSize * puzzleSize) - puzzleSize) // bottom line
			{
				mainSquareSpace = spaceSquareCenter.get(i)
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
			} 
			else
			{
				mainSquareSpace = spaceSquareCenter.get(i)
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))				
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
			}
	
			//spawn of square agent
			spawn(Square, i, tileNumber, tuileSquareSpace, spaceToAddToSquareAgent, mainSquareSpace)
										
			//we start the puzzle with tile 3
			if (tileNumber == puzzleSize - 1)
			{
				startingSpace = tuileSquareSpace
				startingSpace.register(asEventListener())	
			}
			
			//spawn blank tile 
			if (tileNumber == -1)
			{
				spawn(BlankTile, tuileSquareSpace)
				
				var xyVal = new ArrayList<Integer>()
				xyVal = getMatrixXYwithCaseNumber(i, puzzleSize)
				SharedValues.setMatrix(xyVal.get(0),xyVal.get(1), -1)
				
			}
			else //spawn an active tile
			{
				spawn(ActiveTile, tileNumber, tuileSquareSpace)
				
				var xyVal = new ArrayList<Integer>()
				xyVal = getMatrixXYwithCaseNumber(i, puzzleSize)
				SharedValues.setMatrix(xyVal.get(0), xyVal.get(1), tileNumber)	
			}
			 
			printMatrix(puzzleSize)
		}

		// Launch the GUI
		PuzzleLauncher.launchInterface()

		var evt = new SearchSatisfaction()
		evt.source = startingSpace.getAddress(getID())
		startingSpace.emit(evt) 

		//killMe //puzzle creator die

		var evtWait = new waitForNewGame()
		evtWait.emit()
		
	}

	on waitForNewGame{
		while(true){
			if( SharedValues.isNewGame() ){
				SharedValues.setNewGame(false)
				var evt = new NewGame()
				evt.emit()
				spawn(PuzzleCreator)
				killMe
			}
			Thread.sleep(1000)
		}
	}
}