package ia54.project.taquin

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
//import ia54.project.taquin.PuzzleConstant
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.Random
import java.util.Collection
import io.sarl.lang.util.SynchronizedSet
import java.util.UUID
import io.sarl.lang.core.Space
import java.util.List
import java.util.ArrayList

agent PuzzleCreator {
	uses Lifecycle, Schedules, DefaultContextInteractions, ExternalContextAccess, Behaviors
	var puzzleSize = 4
	var squareSpace = UUID::randomUUID as Object
	var tileSpace = UUID::randomUUID as Object
	var allTileNumbers = newArrayList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
	var tileNumber : Integer
	var spaceSquareCenter = new ArrayList<Object>()
	var rightColumn = new ArrayList<Integer>()
	var leftColumn = new ArrayList<Integer>()

	on Initialize {

		for(var i = 0; i <= (puzzleSize * puzzleSize) -1; i++) // -1 cause we start at 0
		{
			var uid = UUID::randomUUID as Object
			spaceSquareCenter.add(uid)
		}
	
		//4 size puzzle => left column : 4, 8
		for(var j : Integer = 1; j <= puzzleSize - 2; j++)
		{
			leftColumn.add(j * puzzleSize )
		}
	
		//4 size puzzle => right column : 7, 11
		for(var j : Integer = 2; j <= puzzleSize - 1; j++)
		{
			rightColumn.add(j * puzzleSize - 1)  
			
		}
	
		for(var i = 0; i < (puzzleSize * puzzleSize) ; i++)
		{
			var spaceToAddToSquareAgent = new ArrayList<Object>()
			var tuileSquareSpace = UUID::randomUUID as Object 
			println("avant if")
			if(i == 0) //top left corner 
			{
				println("dans i = 0")
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
			}
			else if(i == puzzleSize -1) //top right corner
			{
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
			}
			else if(i == (puzzleSize * puzzleSize) - puzzleSize) //bottom left corner 
			{
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
			}
			else if(i == (puzzleSize * puzzleSize - 1)) // bottom right corner 
			{
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1)) 
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
			}
			else if(leftColumn.contains(i)) // left column
			{
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
			}
			else if(rightColumn.contains(i)) //right column
			{
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1))
				println("size"+puzzleSize+ " "+i)
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
			}
			else if(i > 0 && i < puzzleSize -1 ) // top line
			{
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
	
			}
			else if(i < puzzleSize * puzzleSize -1 && i > (puzzleSize * puzzleSize) - puzzleSize) // bottom line
			{
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
	
			} 
			else
			{
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - 1))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i - puzzleSize))
				spaceToAddToSquareAgent.add(spaceSquareCenter.get(i + puzzleSize))
			}
	
			//spawn de l'agent square
			spawn(Square, i, tuileSquareSpace, spaceToAddToSquareAgent)
	
			if (allTileNumbers.size() > 0)
			{
			val random = new Random()
			var randNumber : Integer
			randNumber = random.nextInt(allTileNumbers.size())
	
			tileNumber = allTileNumbers.get(randNumber)
			allTileNumbers.remove(tileNumber)
	
			//spawn de l'agent tuile 
			spawn(ActiveTile, tileNumber, tuileSquareSpace)
			}
		}
		
		var space = UUID::randomUUID as Object spawn(Square, 16, space) spawn(BlankTile, space) 
		killMe //kill de l'agent puzzle creator

	}

}