package ia54.project.taquin

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
//import ia54.project.taquin.PuzzleConstant
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.Random
import java.util.Collection
import io.sarl.lang.util.SynchronizedSet
import java.util.UUID
import io.sarl.lang.core.Space
import java.util.List
import java.util.ArrayList

agent ActiveTile {
    uses Lifecycle, Schedules, DefaultContextInteractions, ExternalContextAccess, Behaviors
    var placementNumber : Integer
    var space : OpenEventSpace
    var isSatisfed : Boolean
    //on wich square Active tile is
    def setPlacement(p_placement : Integer) {
        placementNumber = p_placement
    }

    on Initialize {
    //get the number from parameters
        placementNumber = occurrence.parameters.get(0) as Integer

        //get the space from parameters
        space = defaultContext.getOrCreateSpace(typeof(OpenEventSpaceSpecification),
        occurrence.parameters.get(1) as UUID)
        space.register(asEventListener())

        println("Active tile spawned with number" + placementNumber)
    }

    //	on getMySquare {
    //		println("Tile number :  " + occurrence.placementNumber)
    //		var evt = new getMyTile(occurrence.placementNumber)
    //		evt.source = space.getAddress(getID());
    //		space.emit(evt)
    //	}

}

agent BlankTile {
    uses Lifecycle, Schedules, DefaultContextInteractions, ExternalContextAccess, Behaviors
    var space : OpenEventSpace

    on Initialize {
        space = defaultContext.getOrCreateSpace(typeof(OpenEventSpaceSpecification),
        occurrence.parameters.get(0) as UUID)
        space.register(asEventListener())

        println("Blank tile spawned")
    }
}